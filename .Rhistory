install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
library(swirl)
swirl()
install_course_github("swirldev", "Statistical_Inference", branch = "master", multi = FALSE)
install_from_swirl("Statistical Inference")
swirl()
.064
0.64
0.64
mypdf
integrate(mypdf,0,1.6)
1.4142
equiv_val(sqrt(2))
1.414214
0.000997
0.000997
0.014985
0.06238268
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)]]
expect_dice(dice_low)
3.5
library(swirl)
swirl()
integrate(myfunc,0,2)]
integrate(myfunc,0,2)
spop
mean(spop)
allsam
integrate(myfunc,0,2)
apply(allsam,1,mean)
mean(smeans)
# Read in the dataset
Fdata <- read.csv("framingham.csv")
# Look at structure
str(Fdata)
# Load the library caTools
library(caTools)
set.seed(12345)
inTrain <- createDataPartition(y=data$TenYearCHD, p=0.65, list=FALSE)
myTrain <- Fdata[inTrain,]
myTest <- Fdata[-inTrain,]
dim(myTrain)
dim(myTest)
predictTest = predict(framinghamLog, type="response", newdata=test)
framingham <- read.csv("framingham.csv")
# Look at structure
str(framingham)
newFramingham<- data.frame(age=framingham$age,male=framingham$male,totChol=framingham$totChol,currentSmoker=framingham$currentSmoker,diabetes=framingham$diabetes,sysBP=framingham$sysBP,BPMeds=framingham$BPMeds,TenYearCHD=framingham$TenYearCHD)
str(newFramingham)
# Load the library caTools
library(caTools)
# Randomly split the data into training and testing sets
set.seed(1000)
split = sample.split(newFramingham$TenYearCHD, SplitRatio = 0.65)
# Split up the data using subset
train = subset(newFraminghm, split==TRUE)
test = subset(newFraminghm, split==FALSE)
setwd("~/R_coursera/developing_data_productsProject")
shiny::runApp()
